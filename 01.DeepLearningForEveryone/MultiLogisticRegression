import tensorflow as tf

tf.set_random_seed(0)

x_data = [[2.,3.], [4.,3.], [6.,4.], [8.,6.], [10.,7.], [12.,8.], [14.,9.]]
y_data = [[0.], [0.], [0.], [1.], [1.], [1.], [1.]]

X = tf.placeholder(dtype=tf.float64, shape=[None, 2])
Y = tf.placeholder(dtype=tf.float64, shape=[None, 1])

a = tf.Variable(tf.random_uniform([2,1], dtype=tf.float64))
b = tf.Variable(tf.random_uniform([1], dtype=tf.float64))

y = tf.sigmoid(tf.matmul(X, a)+b)

cost = -tf.reduce_mean(Y * tf.log(y) + (1 - Y) * tf.log(1 - y))
learning_rate = 0.1

train = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)

predicted = tf.cast(y>0.5, dtype=tf.float64)
accuracy = tf.reduce_mean(tf.cast(tf.equal(predicted, Y), dtype=tf.float64))

with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    for step in range(3001):
        sess.run(train, feed_dict={X: x_data, Y: y_data})
        if step % 300 == 0:
            print("%.f, cost = %.04f, a1 = %.4f, a1 = %.4f,  b = %.4f" % (step, sess.run(cost, feed_dict={X:x_data, Y:y_data}), sess.run(a[0], feed_dict={X:x_data, Y:y_data}), sess.run(a[1], feed_dict={X:x_data, Y:y_data}), sess.run(b, feed_dict={X:x_data, Y:y_data})))

    print("Accuracy : %.4f"%(sess.run(accuracy, feed_dict={X: x_data, Y: y_data})))